<?php
/**
 * Created by PhpStorm.
 * User: sergio
 * Date: 01.08.17
 * Time: 16:49
 */

namespace app\controllers;

use app\helpers\ApiHelper;
use app\helpers\param\ApiParam;
use app\models\AuthAssignment;
use app\models\AuthItem;
use app\models\Customers;
use yii\base\Action;
use yii\base\Exception;
use yii\base\InvalidArgumentException;
use yii\base\InvalidConfigException;
use yii\db\Expression;
use yii\db\Query;
use yii\helpers\Json;
use yii\rbac\Item;
use yii\web\UnauthorizedHttpException;
use app\models\Support;
use Yii;
use yii\rest\ActiveController;
use app\models\Card;
use app\models\AppLog;

/**
 * Class ApiController
 * @package app\controllers
 *
 * used for external request for specified data
 */
class ApiController extends ActiveController
{

    public $defaultAction = 'methods';

    public $modelClass = 'Supports';

    /**
     * @var bool
     */
    public $enableCsrfValidation = false;

    /**
     * @var array
     */
    protected $accessControlAllowedHeaders = [

        'Content-Type',

        'X-Auth-Token',

        'X-Requested-With'
    ];


    /**
     * @var array
     */
    protected $actions = [

        'user/get-info' => 'api/user-info',
        'user/get-current-info' => 'api/current-user-info',
        'methods' => 'methods'

        ];
    /**
     * @var array
     */
    protected $requiredCheckAccessActions = [

        'user-info',
        'current-user-info',
        'card-info',
        'all-users',
        'card',
        'client-state'
    ];

    /**
     * @return array
     */
    public function behaviors()
    {
        $behaviors = parent::behaviors();

        $behaviors['corsFilter'] = [
                'class' => \yii\filters\Cors::class,
                'cors' => [
                    // restrict access to
                    'Origin' => $this->getAllowedOrigins(),
                    // Allow only OPTIONS and GET methods
                    'Access-Control-Request-Method' => ['OPTIONS','GET'],
                    // Allow only headers 'X-Wsse'
//                    'Access-Control-Request-Headers' => ['X-Wsse'],
                    // Allow credentials (cookies, authorization headers, etc.) to be exposed to the browser
                    'Access-Control-Allow-Credentials' => true,
                    // Allow OPTIONS caching
                    'Access-Control-Max-Age' => 3600,
                    // Allow the X-Pagination-Current-Page header to be exposed to the browser.
                    'Access-Control-Expose-Headers' => ['X-Pagination-Current-Page'],
                ]
            ];

        return $behaviors;
    }

    /**
     * @return array
     */
    protected function verbs()
    {
        return [
            'users-available-for-line-chat' => ['GET','OPTIONS'],
            'user-info' => ['GET','OPTIONS'],
            'current-user-info' => ['GET','OPTIONS'],
            'client-state' => ['POST'],
        ];
    }

    /**
     * @param \yii\base\Action $action
     * @return bool
     */
    public function beforeAction($action)
    {
        $this->checkAccess($action);

        $this->setHeaders();

        if($this->isRequestOptions()){

            return false;
        }

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * @return array
     */
    public function getAllowedOrigins():array {

        return ApiParam::getAllowedOrigins();
    }


    /**
     * @param $action Action
     * @param null $model
     * @param array $params
     * @throws UnauthorizedHttpException
     */
    public function checkAccess($action, $model = null, $params = []){

        if(in_array($action->id, $this->requiredCheckAccessActions) &&
            ! $this->isRequestOptions()){

            $helper = new ApiHelper();

            if (!$helper->checkTokenHeader()) {

                throw  new UnauthorizedHttpException('unauthorized');
            }
        }

    }

    /**
     * Setting special header for OPTIONS request method
     *
     * @return bool
     */
     protected function setHeaders(){

         $headers = Yii::$app->response->headers;

         foreach ($this->getAllowedOrigins() as $origin){

             $headers->set('Access-Control-Allow-Origin', $origin);
         }

         if($this->isRequestOptions()){

             // set a Pragma header. Any existing Pragma headers will be discarded.
             $headers->set('Access-Control-Allow-Headers', implode(', ', $this->accessControlAllowedHeaders));

             if(array_key_exists($this->action->id, $this->verbs())){
                 $headers->set('Access-Control-Allow-Methods', implode(', ', $this->verbs()[$this->action->id]));
             }

         }

         return true;
     }

    /**
     * @return bool
     */
     protected function isRequestOptions(){

       return Yii::$app->getRequest()->getMethod() === 'OPTIONS';
     }



    /**
     * Выдаёт данные (логин) запрошенного пользователя crm
     *
     * @return \yii\web\Response
     * @throws Exception
     */
    public function actionUserInfo(){

        $data = [];

        $id = Yii::$app->request->get('id');

        if($id === null || $id === ''){

            throw  new InvalidArgumentException('id param is empty');
        }

        $data['id'] = $id;

        $user = Support::findOne($id);

        if($user === null){

            throw  new Exception('User not found by id' . $id);
        }

        $data['login'] = $user->getLogin();

        return $this->asJson($data);

    }

    /**
     *
     * Выдаёт данные (логин, роль) текущего (залогиненного в crm) пользователя crm
     *
     * @return \yii\web\Response
     * @throws Exception
     */
    public function actionCurrentUserInfo(){

        $data = [];

        $data['id'] = Yii::$app->user->getId();

        if($data['id'] === null){

            throw  new Exception('Current web user is not found');
        }

        $data['login'] = Support::getCurrent()->getLogin();

        $roles = \Yii::$app->authManager->getRolesByUser($data['id']);

        // this is for get first of set of roles
        reset($roles);

        //while role name is the key of roles set, get this key
        $data['role'] = key($roles);

        return $this->asJson($data);
    }

    /**
     * @return \yii\web\Response
     */
    public function actionMethods(){

        return $this->asJson(array_keys($this->actions));
    }

    /**
     *  Данные карточки (id клиента, id владельца, логин владельца карточки
     *  по заданному набору id клиента (в формате json)
     *
     * @throws Exception
     */
    public function actionCard(){

        $customer_id = Yii::$app->request->get('customer_id');

        if($customer_id === null || $customer_id === ''){

            throw  new InvalidArgumentException('customer_id param is empty');
        }

        $customer_id = Yii::$app->request->get('customer_id');

        $customers= Json::decode($customer_id);

        if($customers === null){

            throw  new Exception('cant decode json input: ' . $customer_id);
        }

        $query = new Query();
        $query->select(['customer_id','c.user_id', 'u.login as owner']);
        $query->from(Card::tableName().' c');
        $query->leftJoin(Support::tableName(). ' u','c.user_id = u.id');
        $query->where(['in', 'c.customer_id', $customers]);

        $data = $query->indexBy('customer_id')->all();

        return $this->asJson($data);
    }

    /**
     * список пользователей crm (id, логин, статус, роль, набор доступных валют)
     */
    public function actionAllUsers(){

        $query = new Query();
        $query->select(['u.id', 'u.login', 'u.status','assignment.item_name as role','u.currencies']);
        $query->from(Support::tableName().' u');
        $query->leftJoin(AuthAssignment::tableName(). ' assignment', 'assignment.user_id::integer=u.id::integer');
        $query->leftJoin(AuthItem::tableName(). ' item', 'assignment.item_name=item.name');

        // select only roles
        $query->where(['item.type' => Item::TYPE_ROLE]);
        $data = $query->all();

        return $this->asJson($data);
    }


    /**
     * логирование в crm клиентских состояний
     */
    public function actionClientState(){

        $data = [];

        $jsonBody = Yii::$app->getRequest()->getRawBody();

        $bodyArr = Json::decode($jsonBody);

        if(! array_key_exists('status', $bodyArr)){

            throw new InvalidConfigException('missed status key at json body data');
        }

        if($bodyArr['status'] === 'error'){

            Yii::error('client state data: ' . $jsonBody, AppLog::API_CATEGORY);

            $data['status'] = 'ok';
            return $this->asJson($data);
        }

        Yii::info('client state data: ' . $jsonBody, AppLog::API_CATEGORY);

        return $this->asJson($data);
    }
}
